#학생
#속성(멤버):이름,번호,키
#기능(메서드)-학생정보보기,학생정보입력,__init__


class 학생:
    이름 = ''
    번호 = 0
    키 = 0
    
    def __init__(self,이름,번호,키): 
        self.이름=이름
        self.번호=번호
        self.키=키

    
    #예를 들어 , 이 매서드에 버그가 있어서 수정해야할 경우 클래스 학생1을 수정할 경우엔 학생2..3..4...5.6..7.. 다 수정해야함
    def 학생정보보기(self):
        print('이름:',self.이름,'번호:',self.번호,'번', '키:',self.키) 
   
    def 학생정보입력(self,수정이름,수정번호,수정키):
        self.이름=수정이름
        self.번호=수정번호
        self.키=수정키



#다른 사람이 '학생'class를 사용할텐데
#사용을 하다보면 클래스 수정(업데이트)를 요청할 수 있음.
#예를 들어 , 이 매서드에 버그가 있어서 수정해야할 경우 클래스 학생1을 수정할 경우엔 학생2..3..4...5.6..7.. 다 수정해야함
#그래서 '상속' 이란걸 해야함
class 학생2:
    이름=''
    번호=0
    키=0
    def __init__(self,이름,번호,키):
        #객체가 생성될 때 사용되는 함수 
        self.이름=이름
        self.번호=번호
        self.키=키
    

    def 학생정보보기(self):
        print('이름:',self.이름,'번호:',self.번호,'번', '키:',self.키) 
   
    def 학생정보입력(self,수정이름,수정번호,수정키):
        self.이름=수정이름
        self.번호=수정번호
        self.키=수정키
    def __del__(self):
        #소멸자
        #객체(변수)가 없어질 때 사용되는 함수
        #요청사항--> 프로그램 끝날때 종료가 된다는 내용좀 추가해주세요
       print('프로그램 종료')
#그래서 복붙후 학생2 이런식으로  하는게 아니라
class 학생2(학생):
    def __del__(self):
        print('프로그램 종료')
   #이런식으로 하면 난 클래스 학생2라는이름을 가진 클래스인데 (학생)클래스의 모든 내용이 들어있다... 이런 말임.
class 학생3(학생):
    #학생클래스 복붙
    def 학생정보보기(self):
        print('==이름:',self.이름,'번호:',self.번호,'번', '키:',self.키,'==') 

    #원본클래스는 '부모클래스',복붙받은 클래스는 '자식클래스'
    #만약에 부모와 자식이 매서드명이 겹치면
    #자신의 매서드가 우선으로 사용됨

    #상속이 뭐냐 클래스 복붙이다 (결론)..>> 왜 쓰냐 상속 안하고 복붙하면 복붙한거 다 고쳐야함
#예시
철수=학생('김철수',1,177.7)
영희=학생('박영희',2,155.5)
짱구=학생('신짱구',3,173.3)

철수.학생정보보기()
영희.학생정보보기()
짱구.학생정보보기()

#이름: 짱구, 번호: 1번 ,키:173.3
짱구.학생정보입력('짱구',4,174.9)
짱구.학생정보보기() #위에거랑 다르게 나와야겠지